name: Rust

on:
  workflow_dispatch:
  pull_request:
  push:

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings

jobs:
  cargo-clippy:
    name: Clippy (${{ matrix.os }})
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y -qq build-essential pkg-config jq dpkg curl wget zstd cmake clang libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev libdbus-1-dev libwebkit2gtk-4.1-dev libjavascriptcoregtk-4.1-dev valac libibus-1.0-dev libglib2.0-dev sqlite3 libxdo-dev protobuf-compiler libfuse2 bash fish zsh shellcheck
      - name: Install dependencies (macOS)
        if: runner.os == 'Macos'
        run: brew install protobuf fish shellcheck
      - uses: dtolnay/rust-toolchain@1.100.0
        id: toolchain
        with:
          components: clippy
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: cargo-clippy-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}-${{ steps.toolchain.outputs.cachekey }}
      - run: cargo clippy --locked --workspace --color always -- -D warnings

  cargo-test:
    name: Test (${{ matrix.os }})
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
      fail-fast: false
    env:
      OS: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y -qq build-essential pkg-config jq dpkg curl wget zstd cmake clang libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev libdbus-1-dev libwebkit2gtk-4.1-dev libjavascriptcoregtk-4.1-dev valac libibus-1.0-dev libglib2.0-dev sqlite3 libxdo-dev protobuf-compiler libfuse2 bash fish zsh shellcheck
      - name: Install dependencies (macOS)
        if: runner.os == 'Macos'
        run: brew install protobuf fish shellcheck
      # this needs to be nightly for code coverage
      - uses: dtolnay/rust-toolchain@nightly
        id: toolchain
        with:
          components: llvm-tools-preview
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: cargo-test-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}-${{ steps.toolchain.outputs.cachekey }}
      # TODO: Coverage fails with `error: unnecessary transmute` in `appkit-nsworkspace-bindings`
      # - name: Generate code coverage
      #   run: cargo +nightly llvm-cov --locked --workspace --codecov --output-path lcov.info
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v5
      #   if: github.event.repository.fork == false
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     files: lcov.info
      #     fail_ci_if_error: true
      #     env_vars: OS
      - name: Run tests
        run: cargo test --locked --workspace --lib --bins --test '*' --exclude fig_desktop-fuzz

  cargo-fmt:
    name: Fmt
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt
      - run: cargo +nightly fmt --check -- --color always

  cargo-deny:
    name: Deny
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: EmbarkStudios/cargo-deny-action@v2
